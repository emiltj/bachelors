updateR()
library(pacman)
p_load(installr)
updateR()
updateR()
library(pacman)
p_load(rvest)
site <- "https://leagueoflegends.fandom.com/wiki/List_of_champions/Base_statistics"
web <- read_html(site)
revs <- html_nodes(web,"td , .headerSort")
revs <- html_text(revs)
revs
l <- replicate(
132,
list(sample(letters, 20)),
simplify = FALSE
)
View(l)
class(revs)
revs
list(revs)
revs <- list(revs)
View(revs)
revs
p_load(rvest, tidyverse)
as.data.frame(revs)
revs_dfas.data.frame(revs)
revs_df <- as.data.frame(revs)
View(revs_df)
revs_df <- as.data.frame(revs)
colnames(revs_df) <- "A"
View(revs_df)
?split
View(revs_df)
View(revs_df)
revs_df$object <- c("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range")
19/2910
2910/19
View(revs_df)
# Deleting last 3 rows with nonsense
n<-dim(revs_df)[1]
# Deleting last 3 rows with nonsense
n<-dim(revs_df)[1]
revs_df<-revs_df[1:(n-5),]
# Deleting last 3 rows with nonsense
n<-dim(revs_df)[1]
revs_df <- revs_df[1:(n-5),]
site <- "https://leagueoflegends.fandom.com/wiki/List_of_champions/Base_statistics" # select webpage
web <- read_html(site)
revs <- html_nodes(web,"td , .headerSort") # paste information from the chrome extension "SelectorGadget"
revs <- html_text(revs)
revs
# Making it dataframe
revs_df <- as.data.frame(revs)
colnames(revs_df) <- "A"
# Deleting last 3 rows with nonsense
n<-dim(revs_df)[1]
revs_df$A <- revs_df$A[1:(n-5),]
View(revs_df)
# Deleting last 3 rows with nonsense
n<-dim(revs_df)[1]
revs_df$A <- revs_df$A[1:(n-3),]
revs_df$A <- revs_df$A[1:(n-3),]
n<-dim(revs_df$A)[1]
revs_df$A <- revs_df$A[1:(n-3),]
slice(revs_df, 1:(n()-5))
revs_df <- slice(revs_df, 1:(n()-5))
View(revs_df)
site <- "https://leagueoflegends.fandom.com/wiki/List_of_champions/Base_statistics" # select webpage
web <- read_html(site)
revs <- html_nodes(web,"td , .headerSort") # paste information from the chrome extension "SelectorGadget"
revs <- html_text(revs)
revs
# Making it dataframe
revs_df <- as.data.frame(revs)
colnames(revs_df) <- "A"
revs_df <- slice(revs_df, 1:(n()-3))
2907/19
revs_df$object <- c(rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range"),153)
revs_df$object <- c(rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range"), 153)
View(revs_df)
revs_df$object <- c(rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range"), 153)
?rep
revs_df$object <- c(rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range"), 153)
rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range"), 153)
rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range", 153)
rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range", 153)
rep("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range", 153)
c("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range")
list <- c("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range")
rep(list, 153)
list <- rep(list, 153)
list
revs_df$object <- list
View(revs_df)
View(revs_df)
# Making each object it's own column
revs_df %>%
group_by(object) %>%
tid<- c(1,2,3,4, 1,2,3,4,1,2,3,4)
tid<- c(1,2,3,4, 1,2,3,4,1,2,3,4)
active<- c(0,1,0,4, 0,0,0,1,0,0,1,0)
person<- c('John', 'John','John', 'John', 'Emma', 'Emma','Emma','Emma', 'Edward', 'Edward', 'Edward', 'Edward')
df<- data.frame(tid, active, person)
View(df)
?split
split(revs_df$A, revs_df$object)
dff <- split(revs_df$A, revs_df$object)
View(dff)
listt <- split(revs_df$A, revs_df$object)
View(listt)
list[[1]]
list[1]
list[1]
listt
listt[[1]]
# Specifying which rows are which objects
objectss <- c("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range")
objectss <- rep(objectss, 153)
revs_df$object <- objectss
View(revs_df)
site <- "https://leagueoflegends.fandom.com/wiki/List_of_champions/Base_statistics" # select webpage
web <- read_html(site)
revs <- html_nodes(web,"td , .headerSort") # paste information from the chrome extension "SelectorGadget"
revs <- html_text(revs)
revs
library(pacman)
p_load(rvest, tidyverse)
site <- "https://leagueoflegends.fandom.com/wiki/List_of_champions/Base_statistics" # select webpage
web <- read_html(site)
revs <- html_nodes(web,"td , .headerSort") # paste information from the chrome extension "SelectorGadget"
revs <- html_text(revs)
revs
# Making it dataframe
df <- as.data.frame(revs)
colnames(df) <- "A"
# Deleting last 3 rows with nonsense
df <- slice(df, 1:(n()-3))
2907/19
# Specifying which rows are which objects
objectss <- c("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range")
objectss <- rep(objectss, 153)
df$object <- objectss
df$objectss <- objectss
# Making each object it's own column
listt <- split(df$A, df$object)
listt
do.call(rbind, listt)
dff <- do.call(rbind, listt)
View(dff)
dff <- do.call(cbind, listt)
View(dff)
df <- do.call(cbind, listt)
# Making each object it's own column
lists <- split(df$A, df$object)
df <- do.call(cbind, lists)
View(df)
# Making each object it's own column
lists <- split(df$A, df$object)
library(pacman)
p_load(rvest, tidyverse)
site <- "https://leagueoflegends.fandom.com/wiki/List_of_champions/Base_statistics" # select webpage
web <- read_html(site)
revs <- html_nodes(web,"td , .headerSort") # paste information from the chrome extension "SelectorGadget"
revs
revs <- html_text(revs)
# Making it dataframe
df <- as.data.frame(revs)
colnames(df) <- "A"
# Deleting last 3 rows with nonsense
df <- slice(df, 1:(n()-3))
2907/19
# Specifying which rows are which objects
objectss <- c("Champion", "HP", "HP+", "HP5", "HP5+", "MP", "MP+", "MP5","MP5+", "AD", "AD+", "AS", "AS+", "AR", "AR+", "MR", "MR+", "MS", "Range")
objectss <- rep(objectss, 153)
df$objectss <- objectss
# Making each object it's own column
lists <- split(df$A, df$object)
df <- do.call(cbind, lists)
View(df)
View(df)
> version
version
Sys.info()[["machine"]]
setwd("C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/bachelors_project/data/danish_denoised/")
getwd()
library("pacman")
p_load(farff, foreign, RWeka, data.table, tidyverse, tidymodels, glmnet, caret, e1071, groupdata2)
```
Features, output:
Reading extracted features, merging and making a sample for working with
```{r}
output <- rbind(read.csv("./csv_files/sz_output.csv"), read.csv("./csv_files/td_output.csv"))
```
Feature data
```{r}
output$Study <- NA
output$ID <- NA
output$Trial <- NA
for (i in 1:length(output$file)){
cell <-output[i,"file"]
numbers <- gsub("[A-Za-z]|\\.|\\_","", cell)
#Study
output[i,"Study"] <- substr(numbers, 1, 1)
#Trials
if (nchar(numbers) == 6){
output[i,"Trial"] <- substr(numbers, 6, 6)
}
else if (nchar(numbers) == 7){
output[i,"Trial"] <- substr(numbers, 6, 7)
}
#ID
output[i,"ID"] <- substr(numbers, 3, 5)
}
# Deleting unnecessary columns
output <- output %>%
select(name, class, X, file, Diagnosis, frameTime, Trial, Study, ID, everything())
output <- output[,c(4:997)]
# Making it same format as demo data
output$ID <- as.integer(output$ID)
output$Study <- as.integer(output$Study)
output$Diagnosis <- as.character(output$Diagnosis)
length(unique(output[output$Diagnosis == "td","ID"]))
length(unique(output[output$Diagnosis == "sz","ID"]))
```
Demographic data
```{r}
# Load data
demo <- read.csv("C:/Users/Lenovo/Desktop/Diverse dokumenter/Cognitive Science/bachelors_project/data/danish_denoised/demographic_data/demographic_data_danish.csv", sep=";")
# General fix
colnames(demo)[1] <- "Study"
colnames(demo)[3] <- "ID"
# Just taking all the danish data
demo <- demo %>% filter(demo$Language == "Danish")
# Ordering by ID, and prepping Diagnosis for below for loop
demo[is.na(demo$Diagnosis)] <- demo[order(demo$ID),]
demo$Diagnosis[is.na(demo$Diagnosis)] <- 0
# Make Diagnosis into same format as in "output"
for (i in 1:length(demo$Diagnosis)){
cell <- demo[i,"Patctr"]
if (cell == "C" | cell == "c"){
demo[i,"Patctr"] <- "td"
}
else if (cell == "P" | cell == "p" ){
demo[i,"Patctr"] <- "sz"
}
}
# Making it same format as output
demo$Diagnosis[demo$Diagnosis == 0] <- NA
demo$ID <- as.integer(demo$ID)
demo$Study <- as.integer(demo$Study)
colnames(demo)[6] <- "Diagnosis"
# Selecting the few columns I need from the demo
cols <- colnames(demo[,1:7])
variables_demo <- colnames(demo[,cols])
demo <- demo[,variables_demo]
```
# Merging the two datasets
```{r}
#Merging
df <- merge(output, demo, by=c("ID","Diagnosis", "Study"), all = T)
# deleting all entries that don't have acoustic data
df <- df[!is.na(df$file), ]
# making sure each ID is unique (+ with 1000 for SZ's)
df$ID <- as.numeric(df$ID)
for (i in 1:length(df$ID)){
cell <- df[i,"ID"]
if (df[i,"Diagnosis"] == "sz"){
df[i,"ID"] <- cell+1000
}
}
```
Making sure df has good data
```{r}
# Making the order more readable, and deleting rows with all NA's:
df <- df %>%
select(ID, Study, Diagnosis, Trial, Gender, Age, cols, everything())
# Finding out which ID's have NA's in Gender, and giving them what they should have
unique(df[is.na(df$Gender), 1])
#View(df[df$ID == 326 | df$ID == 1448, 1:10 ])
#View(demo[demo$ID == 326 | demo$ID == 448, ])
df[df$ID == 326 | df$ID == 1448, 5] <- "M"
# Make diagnosis into a factor
class(df$Diagnosis)
#df$Diagnosis <- as.factor(df$Diagnosis)
# Removing all columns with no variance
badcolumns <- NULL #making an empty list
for (columns in 1:length(df)){ #every column in df
if (is.factor(df[,columns])){ #is the column a factor?
# print(columns)
if(uniqueN(df[,columns])<2){ #does the column have below 2 levels?
bad_column_name <- colnames(df)[columns] #add the column name to a list of bad columns
badcolumns <- c(badcolumns, bad_column_name) #combine it with the existing list
}
}
if (is.numeric(df[,columns])){ #is the column numeric?
# print(columns)
if(var(df[,columns], na.rm = T)==0){ #is variance 0?
bad_column_name <- colnames(df)[columns]  #add the column name to a list of bad columns
badcolumns <- c(badcolumns, bad_column_name)#combine it with the existing list
}
}
}
badcolumns
# Select all columns, except those with colnames that appear in badcolumns
df <- df[ ,!(colnames(df) %in% badcolumns)]
# Select the columns we need + predictor variables. Don't keep the rest
preds <- colnames(df[,10:length(colnames(df))])
df <- df[,c("ID","Study","Diagnosis","Trial","Gender","Age","Language", preds)]
length(colnames(df[,preds]))
```
Understand the data
```{r}
# Comparing number of ID's in both demo and output
length(unique(demo[demo$Diagnosis == "td","ID"]))
length(unique(demo[demo$Diagnosis == "sz","ID"]))
length(unique(output[output$Diagnosis == "td","ID"]))
length(unique(output[output$Diagnosis == "sz","ID"]))
length(unique(df[df$Diagnosis == "td","ID"]))
length(unique(df[df$Diagnosis == "sz","ID"]))
# We end up having fewer participants in the output and df, than demo - but they match, so we have data on all participants
################################## Gender and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis) %>% summarize(count=n())
################################## WITHIN TD ##################################
# Mean, SD and range of ages
mean(na.omit(df[df$Diagnosis == "td", "Age"]))
sd(na.omit(df[df$Diagnosis == "td", "Age"]))
range(na.omit(df[df$Diagnosis == "td", "Age"]))
################################## WIHTIN SZ ##################################
# Mean, SD and range of ages
mean(na.omit(df[df$Diagnosis == "sz", "Age"]))
sd(na.omit(df[df$Diagnosis == "sz", "Age"]))
range(na.omit(df[df$Diagnosis == "sz", "Age"]))
```
# Splitting the data into test and training
```{r}
df$ID <- as.factor(df$ID)
partitions <- partition(
data = df,
p = 0.2,
cat_col = c("Diagnosis", "Gender"),
id_col = "ID"
)
holdout <- as.data.frame(partitions[1])
train <- as.data.frame(partitions[2])
# Deleting rows with all NA's:
holdout <- as.data.frame(holdout[!is.na(holdout$ID),])
train <- as.data.frame(train[!is.na(train$ID),])
rm(demo, output, partitions)
```
Checking that the partitioning has been successful
```{r}
#Check if it fits with rows:
nrow(holdout)
nrow(train)
nrow(train)+nrow(holdout)
nrow(df)
# Checking if some ID's appear in both partitions
holdout$ID %in% train$ID
# Checking number of Males and Females of each Diagnosis, before partitioning
df %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis) %>% summarize(count=n())
# Checking number of Males and Females of each Diagnosis, in Train and Holdout
train %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis) %>% summarize(count=n())
holdout %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis) %>% summarize(count=n())
################################## Gender and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis) %>% summarize(count=n())
################################## Gender, diagnosis and study ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis, Study) %>% summarize(count=n())
################################## Gender, diagnosis and study ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Gender, Diagnosis) %>% summarize(count=n())
################################## Gender and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis) %>% summarize(count=n())
################################## WITHIN TD ##################################
# Mean, SD and range of ages
mean(na.omit(df[df$Diagnosis == "td", "Age"]))
sd(na.omit(df[df$Diagnosis == "td", "Age"]))
range(na.omit(df[df$Diagnosis == "td", "Age"]))
################################## WITHIN TD ##################################
# Mean, SD and range of ages
mean(na.omit(df[df$Diagnosis == "td", "Age"]))
sd(na.omit(df[df$Diagnosis == "td", "Age"]))
range(na.omit(df[df$Diagnosis == "td", "Age"]))
################################## WITHIN TD ##################################
# Mean, SD and range of ages
mean(na.omit(df[df$Diagnosis == "td", "Age"]))
sd(na.omit(df[df$Diagnosis == "td", "Age"]))
range(na.omit(df[df$Diagnosis == "td", "Age"]))
################################## WITHIN TD ##################################
# Mean, SD and range of ages
mean(na.omit(df[df$Diagnosis == "td", "Age"]))
sd(na.omit(df[df$Diagnosis == "td", "Age"]))
range(na.omit(df[df$Diagnosis == "td", "Age"]))
################################## WITHIN TD ##################################
# Mean, SD and range of ages
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(mean_age = mean(Age))
################################## WITHIN TD ##################################
# Mean, SD and range of ages
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(mean_age = mean(Age),
sd_age = sd(na.omit(Age)),
range_age =range(na.omit(Age)))
################################## WITHIN TD ##################################
# Mean, SD and range of ages
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
range_age =range(na.omit(Age)))
################################## Gender, diagnosis and study ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Gender, Diagnosis) %>% summarize(count=n())
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
range_age =range(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)),
range_age = range(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n()),
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
count_female = n(filter(Gender == "Female"))
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
count_female = n(filter(Gender == "Female")),
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
count_females = n(Gender == "Female")
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
df[1:10,1:10]
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
count_females = n(Gender == "F")
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
count_females = n(Gender == "F"),
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
################################## Gender, diagnosis and study ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Gender, Diagnosis) %>% summarize(count=n())
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Study, Diagnosis) %>% summarize(count = n(),
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
min_age = max(na.omit(Age)),
max_age = min(na.omit(Age)))
# For all studies combined
################################## Gender, diagnosis and study ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Gender, Diagnosis) %>% summarize(count=n())
################################## Age, within study and diagnosis ##################################
df %>% .[!duplicated(.$ID),] %>% group_by(Diagnosis) %>% summarize(count = n(),
mean_age = mean(na.omit(Age)),
sd_age = sd(na.omit(Age)),
max_age = max(na.omit(Age)),
min_age = min(na.omit(Age)))
